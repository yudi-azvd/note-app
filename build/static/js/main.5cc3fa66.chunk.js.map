{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","onClick","content","Notification","message","request","axios","get","nonExisting","id","date","Date","now","then","response","data","concat","newObject","post","put","console","log","Footer","style","color","fontStyle","fontSize","flexShrink","marginTop","padding","background","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","find","n","changedNote","noteService","returnedNote","map","catch","error","setTimeout","filter","useEffect","initialNotes","notesToShow","key","onSubmit","event","preventDefault","noteObject","toISOString","length","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5cc3fa66.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance}) => {\n  const label = note.important ?\n    'make not important' : 'make important'\n  return (\n    <li className='note'>\n      <button onClick={toggleImportance}>{label}\n      </button> {note.content}\n    </li>\n  )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if(message === null)\n    return null\n  \n    return (\n      <div className='error'>\n        {message}\n      </div>\n    )\n}\n\nexport default Notification","import axios from 'axios'\n\nconst baseUrl = '/notes'\n// const baseUrl = 'http://localhost:3001/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  const nonExisting = {\n    id: 1000,\n    content: 'this note is not saved to server',\n    date: Date.now(),\n    important: true\n  }\n  return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  console.log(`${baseUrl}/${id}`);\n  console.log(request.then(response => console.log(response.data)));\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }\n\n","import React from 'react'\n\nconst Footer = () => {\n  const footerStyle = {\n    color:'green',\n    fontStyle: 'italic',\n    fontSize: 16,\n    flexShrink: 0,\n    marginTop: 20,\n    padding: '30px',\n    background: 'lightgrey'\n  }\n\n  /**\n   * sticky footer\n   * https://stackoverflow.com/questions/3443606/make-footer-stick-to-bottom-of-page-correctly\n   */\n\n  return (\n    <footer style={footerStyle}>\n      <em>\n        Note app, Department of Computer \n        Science, University of Helsinki \n        2019\n      </em>\n    </footer>\n  )\n}\n\nexport default Footer","import React, { useState, useEffect } from 'react'\n\nimport Note from './components/Note'\nimport Notification from './components/Notification'\n\nimport noteService from './services/notes'\nimport Footer from './components/Footer';\n\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('a new note...')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage,  setErrorMessage] = useState(null)\n\n  const toggleImportance = id => {\n    const note = notes.find(n => n.id === id)\n    // It is not recommended to modify note cause it is part of notes, \n    // which is part of the component's state. Changed not is a shallow\n    // copy of note.\n    const changedNote = { ...note, important: !note.important }\n    console.log('updating note with id', id);\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note:returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(`Note ${note.content} was already removed from server`)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const notesToShow = showAll ?\n    notes : notes.filter(note => note.important)\n\n  const rows = () => notesToShow.map(note => \n    <Note \n      key={note.id} \n      note={note} \n      toggleImportance={() => toggleImportance(note.id)}\n    />\n  )\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: false,\n      id: notes.length+1,\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    // syncs changes made to input with the component's state\n    setNewNote(event.target.value)    \n  }\n  return (\n    <div className='main'>\n      <div className='content'>\n      <h1>Notes</h1>\n        <Notification message={errorMessage} />\n\n        <div>\n          <button onClick={() => setShowAll(!showAll)}>\n            show {showAll ? 'important' : 'all'}\n          </button>\n        </div>\n        <ul>\n          {rows()}\n        </ul>\n\n        <form onSubmit={addNote}>\n          <input \n            value={newNote} \n            onChange={handleNoteChange}\n          />\n          <button type='submit'>save</button>\n        </form>\n      </div>\n      <Footer />      \n    </div>\n  )\n}\n\nexport default App\n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\n\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}